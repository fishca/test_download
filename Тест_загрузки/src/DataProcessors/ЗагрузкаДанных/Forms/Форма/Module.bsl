
&НаСервере
Процедура ПрочитатьФайлНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайл(Команда)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Оповещение = Новый ОписаниеОповещения("ОповещениеПослеВыбораФайлаДляЧтения", ЭтотОбъект);	 
	Диалог.Показать(Оповещение);	
	
	Сообщить("" + ТекущаяДата());
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПослеВыбораФайлаДляЧтения(ВыбранныеФайлы, ДопПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив")	Тогда
		
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла();
		ОписаниеФайла.Имя = ВыбранныеФайлы[0];
		
		ПомещаемыеФайлы = Новый Массив;
		ПомещаемыеФайлы.Добавить(ОписаниеФайла);
		
		Оповещение = Новый ОписаниеОповещения("ОповещениеПомещениеФайла", ЭтотОбъект, ДопПараметры);		
		НачатьПомещениеФайлов(Оповещение, ПомещаемыеФайлы,, Ложь, ЭтаФорма.УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОповещениеПомещениеФайла(ПомещенныеФайлы, ДопПараметры) Экспорт
	
	Если ТипЗнч(ПомещенныеФайлы) = Тип("Массив") Тогда
		
		Сообщить("Файл " + ПомещенныеФайлы[0].Имя + " отправлен на сервер"); 
		
		Ссылка = ОбработкаПереданногоФайлаНаСервере(ПомещенныеФайлы[0].Хранение, ДопПараметры);
		
		ЭтаФорма.ОтобразитьИзменениеДанных(Ссылка,ВидИзмененияДанных.Изменение);
		
	КонецЕсли; 	
	
КонецПроцедуры  

&НаСервереБезКонтекста 
Функция ОбработкаПереданногоФайлаНаСервере(Знач АдресХранилища, Знач Ссылка)
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);	
	
	Поток5 = ДвоичныеДанные.ОткрытьПотокДляЧтения();	
	
	Разделитель = ",";
	
	Сообщить("" + ТекущаяДата());
	
	Текст = Новый ЧтениеТекста(Поток5, "UTF-8");
	
	ТекСтрока1 = Текст.ПрочитатьСтроку();
	
	МассивКолонок = СтрРазделить(ТекСтрока1, Разделитель);
	
	Сч = 0;
	
	Пока НЕ ТекСтрока1 = Неопределено Цикл 
		
		Сч = Сч + 1;
		ТекСтрока1 = Текст.ПрочитатьСтроку();
		
	КонецЦикла;
	
	Поток5.Закрыть();	
	
	// определяем максимальное количество потоков
	// можно вынести в настройки, для более тонкой настройки скорости загрузки
	ЧислоПотоков = 4;
	
	ЧислоСтрокВТаблице = Сч;
	
	// объем порции данных для обработки каждым потоком 
	РазмерПорции = Цел(ЧислоСтрокВТаблице / ЧислоПотоков);
	
	// массив, где будут храниться фоновые задания 
	МассивЗаданий = Новый Массив;
	
	Для НомерПотока = 1 По ЧислоПотоков Цикл
		
		// определяем индекс для начала обработки данных данным потоком 
		// разные потоки обрабатывают разные части таблицы 
		ИндексНачала = (НомерПотока - 1) * РазмерПорции;
		
		Если (НомерПотока = ЧислоПотоков) Тогда
			// если это последний поток, то он обрабатывает все оставшиеся данные 
			// т.к. число потоков может не быть кратно количеству строк в таблице 
			РазмерПорции = ЧислоСтрокВТаблице - (ЧислоПотоков * РазмерПорции) + РазмерПорции;
			
		КонецЕсли;
		
		// определяем массив параметров для процедуры 
		НаборПараметров = Новый Массив;
		НаборПараметров.Добавить(ДвоичныеДанные);
		НаборПараметров.Добавить(МассивКолонок);
		НаборПараметров.Добавить(?(НомерПотока = 1, ИндексНачала + 2, ИндексНачала));
		НаборПараметров.Добавить(РазмерПорции);
		
		// запуск фонового задания 
		Задание = ФоновыеЗадания.Выполнить("ОбработкаФайлов.ЗаписатьВРегистрДанные", НаборПараметров);
		
		// добавляем задание в массив, чтобы потом отследить выполнение 
		МассивЗаданий.Добавить(Задание);
		
	КонецЦикла;
	
	// проверим результат выполнения фоновых заданий 
	Если МассивЗаданий.Количество() > 0 Тогда
		
		Попытка
			
			ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
			
		Исключение
			
			ЗаписьЖурналаРегистрации("Ошибка загрузки данных из CSV",,,, ОписаниеОшибки());
			
		КонецПопытки;
		
	КонецЕсли;
	
	Сообщить("" + ТекущаяДата());
	
	Возврат Ссылка;
	
КонецФункции 


